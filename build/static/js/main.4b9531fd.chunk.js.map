{"version":3,"sources":["abicode.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","abi","App","props","state","acct","serviceregistrytosend","custid","register","sortedreg","userid","regid","getAccount","bind","injectweb3andcontract","submitregdata","getreg","sortreg","replaceloc","handleChange1","handleChange2","handleChange3","b","window","ethereum","console","log","this","c","a","loadContract","contract","abi2","JSON","stringify","web3instance","Web3","eth","Contract","parse","load","request","method","accounts","setState","chainId","params","code","chainName","rpcUrls","event","preventDefault","prunedArray","slice","i","length","splice","methods","submitRegistry","send","from","then","txOutput","events","newRegistry","returnValues","value","listgetter","call","reg","inputArray","tempregister","forEach","stringpair","index","rawregisterarr","split","document","getElementById","target","select","servname","servip","servindex","changeRegistry","className","undefined","id","onClick","onSubmit","type","defaultValue","onChange","onFocus","handleFocus","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4b9531fd.chunk.js","sourcesContent":["const abi =  [\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"value\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"newRegistry\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string[]\",\n\t\t\t\t\"name\": \"serviceloc2\",\n\t\t\t\t\"type\": \"string[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"usr\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256[]\",\n\t\t\t\t\"name\": \"servicestochange\",\n\t\t\t\t\"type\": \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"changeRegistry\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"userid\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"listgetter\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string[]\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string[]\",\n\t\t\t\t\"name\": \"serviceloc\",\n\t\t\t\t\"type\": \"string[]\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"submitRegistry\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256[]\",\n\t\t\t\t\"name\": \"sss\",\n\t\t\t\t\"type\": \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"test1\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"pure\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"userservicelist\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n  module.exports = {\n      abi\n    };\n\n\n  ","import './App.css';\nimport Web3 from 'web3';\nimport React from 'react';\nimport abi from './abicode.js'\n\n\n//------------GRAPHICAL USER INTERFACE for the API -------------------\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     acct: 'placeholderacct',\n     serviceregistrytosend: ['placeholder'],\n     custid: 'Enter RegistryID',\n     register: '',\n     sortedreg: {},\n     userid: '',\n     regid: 'RegistryID'\n  \n    \n    };\n    //binding functions to scope\n    this.getAccount = this.getAccount.bind(this);\n    this.injectweb3andcontract = this.injectweb3andcontract.bind(this);\n    this.submitregdata = this.submitregdata.bind(this);\n    this.getreg = this.getreg.bind(this);\n    this.sortreg = this.sortreg.bind(this);\n    this.replaceloc = this.replaceloc.bind(this);\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleChange3 = this.handleChange3.bind(this);\n  }\n \n  \n  componentDidMount(b) {\n    //check if client has metamask \n    if (typeof window.ethereum !== 'undefined') {\n      console.log('MetaMask is installed!');\n      //connect to user metamask\n      this.getAccount()\n    }\n}\n//function 'injectweb3andcontract' connects to client's web3 and generated a contract interface to subsequently connect to \n//the window object\ninjectweb3andcontract(c) {\n  //check if client has web3 provider other than modern metamask\n  //if not, do nothing\n \n    //function \"load\" connects contract interface to window object\n  async function load() {\n    window.contract = await loadContract();\n  }\n  //abi convetrted to JSON string\n  var abi2 =  JSON.stringify(abi.abi)\n  async function loadContract() {\n  //previous test contract address: 0xeCefE44efcc1E771a2CF1D99e8037Fd47e37A84E\n  //create new web3 instance\n  var web3instance = new Web3(window.ethereum)\n  //get contract interface and connect it to web3\n  return await new web3instance.eth.Contract(JSON.parse(abi2), '0xf0fB31D088ce9C01132B3f70e9195E08fAf1F92d' );\n  } \n  load();\n  \n}\n\n\n//function 'getAccount' is the function that prompts user to allow page to connect to metmask and prompts them to\n//connect to binance smart chain\nasync getAccount(b){\n   //this is now the preffered method, .enable() is now deprecated\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  //set first account in returned array to React state \"acct\"\n  this.setState({acct: accounts[0]})\n//check if client is connected to correct network\nif (window.ethereum.chainId !== '0x61'){\n  //if not, then prompt user to connect\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: '0x61' }],\n    });\n  } catch (switchError) {\n    // This error code indicates that the chain has not been added to MetaMask.\n    if (switchError.code === 4902) {\n      //if chain has not been added, ask user if they want to add it automatically\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{ chainId: '0x61', chainName: 'Smart Chain', rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'] /* ... */ }],\n        });\n      } catch (addError) {\n        // handle \"add\" error\n        console.log('Error adding chain')\n      }\n    }\n    // handle other \"switch\" errors\n    console.log('Error switching networks')\n  }\n  \n}\n//connect to client web3 and generate connected web3 contract interface\nthis.injectweb3andcontract()\n\n}\n//function 'submitregdata' submits a new registry to the blockchain and recieves the respective registerID, storing the registerID \n//to React state. Contract function 'submitRegistry' requires an array of strings ('servicename ip' pairs)\nasync submitregdata(event){\n  //prevent page from reloading, as this function is called from submitting a form\n  event.preventDefault();\n\n  //eliminate empty data before sending registry array argument to contract\n  //clone the array from React state\n  var prunedArray = this.state.serviceregistrytosend.slice()\n  //iterate over array and remove empty data (strings that consist of a single space)\n  for (let i = 0; i < prunedArray.length;){\n    if (prunedArray[i] === ' '){\n      prunedArray.splice(i, 1)\n    } else {\n      i++\n    }\n  }\nconsole.log(prunedArray);\n  //send transaction to contract using the cleaned data \n  window.contract.methods.submitRegistry(prunedArray).send({from: this.state.acct})\n  .then(txOutput => {\n    //accesses the emitted uint and stores it in React state\n    this.setState({userid: txOutput.events.newRegistry.returnValues.value})\n  })\n}\n\n\n\n//function 'getreg' queries the contract on the blockchain with the registryID and upon receipt, it stores the respective registry\n//to React state\nasync getreg(){\n  //calls the listgetter function of the blockchain contract\n  window.contract.methods.listgetter(this.state.custid).call()\n  //formats recieved registry data and stores it to React state, then seperately converts recieved registry data to string and \n  //stores it to React state\n  .then(reg => {this.sortreg(reg); this.setState({register: JSON.stringify(reg)})})\n  \n}\n\n//function 'sortreg' formats an array and stores the formatted result to React state\nsortreg(inputArray){\n  //creates middleman object to temporarily store data in before it goes to React state\n  var tempregister = {}\n  //iterate over the input array\n  inputArray.forEach((stringpair, index) => {\n  //splits up the name:ip pairs into arrays of length 2\n  var rawregisterarr = stringpair.split(' ');\n  //populates the tempregister object with a key of servicename and value of array containing ip and index of service in registry\n  tempregister[rawregisterarr[0]] =  [rawregisterarr[1], index]\n  })\n  this.setState({sortedreg: tempregister})\n}\n\n//function 'handleChange1' updates React state whenever the 'submit new registry' form is updated\nhandleChange1(){\n  this.setState({serviceregistrytosend: [document.getElementById('tf1').value +' '+ document.getElementById('tf2').value, document.getElementById('tf3').value + ' ' +document.getElementById('tf4').value, \n  document.getElementById('tf5').value +' '+ document.getElementById('tf6').value, document.getElementById('tf7').value + ' ' +document.getElementById('tf8').value,\n  document.getElementById('tf9').value +' '+ document.getElementById('tf10').value, document.getElementById('tf11').value + ' ' +document.getElementById('tf12').value,\n  document.getElementById('tf13').value +' '+ document.getElementById('tf14').value] })\n}\n\n//function 'handleChange2' updates React state whenever the input field for 'retrieve Register' is updated \nhandleChange2(event){\n  this.setState({custid: event.target.value})\n}\n\n//function 'handleChange3' updates React state whenever the input field for 'replace service location' is updated\nhandleChange3(event){\n  this.setState({regid: event.target.value})\n}\n\n//function 'handleFocus' makes it so that user has the respective default text auto-selected when they click a text field\nhandleFocus(event){\n  event.target.select();\n}\n\n//function 'replaceloc' sends transaction to the contract to update a specific registry on the blockchain\nasync replaceloc(){\n  //assign variables to all arguments needed for the changeRegistry function call. Contract function changeRegistry \n  //requires an array of strings ('servicename ip' pairs), the id of the registry to be updated, and an array containing the \n  //indices of each service to be updated\n  var servname = document.getElementById('servname1').value;\n  var servip = document.getElementById('servip1').value;\n  var servindex = this.state.sortedreg[servname][1];\n  //send transaction from linked account\n  window.contract.methods.changeRegistry([servname+' '+servip], this.state.regid, [servindex]).send({from: this.state.acct})\n}\n\n  \n //Render React component\n \n  render() {\n  return (\n    <div className=\"App\">\n     {window.ethereum == undefined ?    <div>Please install metamask</div> : <div><button id='connectmetamaskbtn' onClick={this.getAccount}>Connect Metamask to BSC</button> \n     <form id='form1' onSubmit={this.submitregdata}> <label id='lbl1'>\n          <h3>Submit new Registry:</h3>\n          <h6 id='snh6'>Service names</h6><h6 id='iph6'>IP addresses</h6>\n          <input type=\"text\" id='tf1' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf2' type=\"text\" defaultValue=''   onChange={this.handleChange1} onFocus={this.handleFocus} /> \n          <input type=\"text\" id='tf3' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf4' type=\"text\" defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />\n          <input type=\"text\" id='tf5' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf6' type=\"text\" defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />\n          <input type=\"text\" id='tf7' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf8' type=\"text\" defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />\n          <input type=\"text\" id='tf9' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf10' type=\"text\" defaultValue=''   onChange={this.handleChange1} onFocus={this.handleFocus} /> \n          <input type=\"text\" id='tf11' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf12' type=\"text\" defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />\n          <input type=\"text\" id='tf13' defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} />  <input id='tf14' type=\"text\" defaultValue='' onChange={this.handleChange1} onFocus={this.handleFocus} /> </label>\n        <input id='submitbtn' type=\"submit\" value=\"Submit\" />\n        <div id='returnedid'>RegistryID: {this.state.userid}</div>\n      </form>\n      <div className='methodbox' id='retrieveregisterdiv'>\n        <h3>Retrieve Service Register</h3>\n      <input type='text' id='retrieveregister' value={this.state.custid} onFocus={this.handleFocus} onChange={this.handleChange2}></input>\n     <button onClick={this.getreg}>Get register</button>\n     <div>{this.state.register}</div>\n     </div>\n     <div className='methodbox' id='replaceregisterdiv'>\n       <h3>Change services' IP addresses</h3>\n<input type = 'text' defaultValue='Service name' id='servname1' onFocus={this.handleFocus} ></input> <input type = 'text' defaultValue='New IP' id='servip1' onFocus={this.handleFocus}></input>\n<input type= 'text' id='regid1' value={this.state.regid} onFocus={this.handleFocus} onChange={this.handleChange3}></input>\n     <button id='replacebtn' onClick={this.replaceloc}>Replace service location</button>\n     </div> \n     </div>\n     }\n\n     \n \n\n     \n    </div>\n    \n  );\n}}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}